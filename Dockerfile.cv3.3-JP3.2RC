## Base image
# cudabase image is aarch64/ubuntu, with NVIDIA CUDA libs, L4T28 JetPack31
# Build with docker --squash (experimental)
FROM openhorizon/aarch64-tx2-cudabase

## tensorflow backend installation
RUN apt-get update
RUN apt-get install -y aptitude \
  apt-utils \
  cmake \
  git \
  python3-pip \ 
  python3-dev \
  software-properties-common \
  vim \
  wget \
  x11-utils

## Install Tensorflow from JetsonHacks repo
# (Replaces RUN pip3 install tensorflow-gpu)
RUN pip3 install --upgrade pip
RUN mkdir -p /root/src/jetsonhacks
WORKDIR /root/src/jetsonhacks
RUN wget https://github.com/jetsonhacks/installTensorFlowJetsonTX/raw/master/TX2/tensorflow-1.3.0-cp35-cp35m-linux_aarch64.whl
RUN pip3 install --no-cache-dir tensorflow-1.3.0-cp35-cp35m-linux_aarch64.whl

# Pillow dependencies
RUN apt-get install -y libblas-dev \
  liblapack-dev \
  libjpeg-dev \
  libgtk2.0-dev \
  libhdf5-dev \
  libhdf5-serial-dev \
  libpng-dev \
  python3-matplotlib \
  zlib1g-dev

### Keras dependencies
#### dependencies (optional -?)
RUN pip3 install --no-cache-dir graphviz pydot pandas Pillow
RUN export CC=h5cc
RUN HDF5_DIR=/usr/lib/aarch64-linux-gnu/hdf5/serial/ pip3 install --no-cache-dir h5py

## Build OpenCV, and install scipy, keras
WORKDIR /root/src/
RUN git clone https://github.com/Itseez/opencv.git
RUN git clone https://github.com/Itseez/opencv_contrib.git
WORKDIR /root/src/opencv
RUN mkdir /root/src/opencv/build
WORKDIR /root/src/opencv/build
RUN pip3 install --no-cache-dir scipy keras
RUN cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_NEW_PYTHON_SUPPORT=ON -D -DBUILD_opencv_python3=ON WITH_V4L=ON -D INSTALL_PYTHON_EXAMPLES=OFF -D CUDA_GENERATION=Pascal -D WITH_CUDA=ON ..
RUN make
RUN make install
RUN echo "/usr/local/lib" > /etc/ld.so.conf.d/opencv.conf
RUN ldconfig

## Install face classification
RUN mkdir -p /root/src
WORKDIR /root/src
RUN git clone https://github.com/oarriaga/face_classification
# Replace examples with ones that access video1 (USB camera)
COPY src/*.py face_classification/src/
WORKDIR /root/src/face_classification/src

# Hack to work with old cuda/cudnn libs (TEMPORARY FIX until Tensorflow/Keras support CUDA9/CUDNN7)
RUN export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64/
RUN curl http://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/013/linux-x64/cuda-repo-l4t-8-0-local_8.0.84-1_arm64.deb -so /tmp/cuda-repo-l4t_arm64.deb && dpkg -i /tmp/cuda-repo-l4t_arm64.deb
RUN apt-get update && apt-get install -y cuda-toolkit-8.0
RUN curl http://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/013/linux-x64/libcudnn6_6.0.21-1+cuda8.0_arm64.deb -so /tmp/libcudnn_arm64.deb && dpkg -i /tmp/libcudnn_arm64.deb
RUN curl http://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/013/linux-x64/libcudnn6-dev_6.0.21-1+cuda8.0_arm64.deb -so /tmp/libcudnn-dev_arm64.deb && dpkg -i /tmp/libcudnn-dev_arm64.deb

## Clean up (remove ~6GB space)
RUN apt autoremove && apt clean
RUN rm -rf /tmp/*.deb
RUN rm -rf /var/cuda-repo-8-0-local/*.deb
RUN rm -rf /usr/local/cuda-8.0/doc/*
RUN rm -rf /var/cuda-repo-9-0-local/*.deb
RUN rm -rf /usr/local/cuda-9.0/doc/*
RUN find /root/src/opencv/ -maxdepth 1 -type d \! -name "build" -not -path "/root/src/opencv/" | xargs rm -rf
RUN rm -rf /root/src/opencv/build/modules/
RUN rm -rf /root/src/jetsonhacks
RUN find /usr/local/cuda-9.0/samples/ -iname "[13-9]*" -type d | xargs rm -rf
RUN find /usr/local/cuda-8.0/samples/ -iname "[13-9]*" -type d | xargs rm -rf

